package euphoria.psycho.knife.download;import android.content.ClipboardManager;import android.content.ClipboardManager.OnPrimaryClipChangedListener;import android.content.Context;import android.os.Environment;import android.util.Log;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.widget.TextView;import android.widget.Toast;import java.io.File;import java.io.FileFilter;import java.nio.file.Files;import java.nio.file.Paths;import java.util.List;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import androidx.appcompat.widget.Toolbar.OnMenuItemClickListener;import androidx.recyclerview.widget.RecyclerView;import androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;import euphoria.common.Strings;import euphoria.psycho.common.ContentUtils;import euphoria.psycho.common.base.BaseFragment;import euphoria.psycho.common.widget.selection.SelectableListLayout;import euphoria.psycho.common.widget.selection.SelectableListToolbar;import euphoria.psycho.common.widget.selection.SelectionDelegate;import euphoria.psycho.common.widget.selection.SelectionDelegate.SelectionObserver;import euphoria.psycho.knife.R;import euphoria.psycho.knife.util.HttpUtils;import euphoria.psycho.knife.util.ThreadUtils;public class DownloadFragment extends BaseFragment implements OnMenuItemClickListener, SelectionObserver<DownloadInfo>, SelectableListToolbar.SearchDelegate {    RecyclerView mRecyclerView;    SelectableListLayout mContainer;    DownloadAdapter mAdapter;    DownloadToolbar mToolbar;    SelectionDelegate<DownloadInfo> mSelectionDelegate;    private File mDirectory;    private TextView mEmptyView;    ClipboardManager mClipboardManager;    OnPrimaryClipChangedListener mPrimaryClipChangedListener = () -> {        insertTaskFromClipboard();    };    private DownloadObserver mDownloadObserver;    @Override    public void onSearchTextChanged(String query) {    }    @Override    public void onEndSearch() {    }    @Override    public void onOpenedNormalMenu() {    }    private void initializeDirectory() {        mDirectory = new File(Environment.getExternalStorageDirectory(), "Videos");        if (!mDirectory.isDirectory()) {            mDirectory.mkdirs();        }    }    private void insertTaskFromClipboard() {        String url = ContentUtils.getTextFormClipboard(mClipboardManager);        if (url == null) return;        if (!HttpUtils.isValidURL(url)) return;        String fileName = Strings.substringAfterLast(url, "/");        if (fileName.indexOf('?') != -1)            fileName = Strings.substringBefore(fileName, "?");        File targetFile = new File(mDirectory, fileName);        DownloadInfo downloadInfo = new DownloadInfo();        downloadInfo.filePath = targetFile.getAbsolutePath();        downloadInfo.fileName = fileName;        downloadInfo.status = DownloadStatus.PAUSED;        downloadInfo.url = url;        downloadInfo._id = DownloadManager.instance().getDatabase().insert(downloadInfo);        if (downloadInfo._id > 0) {            Toast.makeText(getContext(), getString(R.string.message_success_insert_download_task, downloadInfo.fileName), Toast.LENGTH_LONG).show();            updateRecyclerView();        }    }    private void listenClipboard() {        if (mClipboardManager == null) {            mClipboardManager = (ClipboardManager) getContext().getSystemService(Context.CLIPBOARD_SERVICE);        }        mClipboardManager.addPrimaryClipChangedListener(mPrimaryClipChangedListener);    }    private void updateRecyclerView() {        ThreadUtils.postOnBackgroundThread(() -> {            List<DownloadInfo> downloadInfos = DownloadManager.instance().getDatabase().queryPendingTask();            ThreadUtils.postOnUiThread(() -> {                mAdapter.switchDatas(downloadInfos);            });        });    }    @Override    protected void bindViews(View view) {        mContainer = view.findViewById(R.id.container);    }    @Override    protected void initViews() {        initializeDirectory();        mSelectionDelegate = new SelectionDelegate<>();        mSelectionDelegate.addObserver(this);        mAdapter = new DownloadAdapter(mSelectionDelegate, this);        mRecyclerView = mContainer.initializeRecyclerView(mAdapter);        mToolbar = (DownloadToolbar) mContainer.initializeToolbar(                R.layout.download_toolbar,                mSelectionDelegate,                R.string.download_title,                null,                R.id.normal_menu_group,                R.id.selection_mode_menu_group,                this, true, false        );        mToolbar.initializeSearchView(this, R.string.directory_search, R.id.search_menu_id);        AppCompatActivity activity = (AppCompatActivity) getActivity();        DownloadManager.instance().setActivity(activity);        mEmptyView = mContainer.initializeEmptyView(                VectorDrawableCompat.create(                        activity.getResources(), R.drawable.downloads_big, activity.getTheme()),                R.string.download_manager_ui_empty, R.string.download_manager_ui_empty);        listenClipboard();        mDownloadObserver = new DownloadObserverImpl(mAdapter);        DownloadManager.instance().addObserver(mDownloadObserver);        DownloadManager.instance().setAdapter(mAdapter);        if (DownloadManager.instance().isInitialize())            updateRecyclerView();        else {            ThreadUtils.postOnBackgroundThread(() -> {                DownloadManager.instance().getDatabase().queryPendingTask().stream().filter(i -> {                    if (i.status == DownloadStatus.COMPLETED) {                        return !new File(i.filePath).exists();                        // i.status = DownloadStatus.PAUSED;                    }                    return false;                }).forEach(i -> DownloadManager.instance().getDatabase().delete(i));                List<DownloadInfo> downloadInfos = DownloadManager.instance().getDatabase().queryPendingTask();                for (DownloadInfo i : downloadInfos) {                    if (i.status != DownloadStatus.COMPLETED                            && i.status != DownloadStatus.PAUSED) {                        i.status = DownloadStatus.PAUSED;                        // i.status = DownloadStatus.PAUSED;                    }                }                ThreadUtils.postOnUiThread(() -> {                    mAdapter.switchDatas(downloadInfos);                });            });        }        insertTaskFromClipboard();        ThreadUtils.postOnUiThreadDelayed(() -> {            DownloadManager.instance().fullUpdate();        }, 1000);    }    @Override    protected int provideLayoutId() {        return R.layout.fragment_download;    }    @Override    protected int provideMenuId() {        return 0;    }    @Override    public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflater) {        super.onCreateOptionsMenu(menu, inflater);    }    @Override    public void onDestroy() {        DownloadManager.instance().removeObserver(mDownloadObserver);        DownloadManager.instance().setAdapter(null);        if (mClipboardManager != null) {            mClipboardManager.removePrimaryClipChangedListener(mPrimaryClipChangedListener);        }        super.onDestroy();    }    @Override    public boolean onMenuItemClick(MenuItem item) {        switch (item.getItemId()) {            case R.id.close_menu_id://                File[] files = mDirectory.listFiles(new FileFilter() {//                    @Override//                    public boolean accept(File pathname) {//                        if (pathname.isFile() && pathname.getName().endsWith(".mp4")) return true;////                        return false;//                    }//                });//                List<String> paths = new DownloadDatabase(getContext())//                        .queryFilePaths();////                for (File file : files) {//                    if (paths.indexOf(file.getAbsolutePath()) == -1) {//////                        file.delete();//                    }//                }                getActivity().finish();                return true;        }        return false;    }    @Override    public void onSelectionStateChange(List<DownloadInfo> selectedItems) {    }}