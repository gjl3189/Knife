#include "Strings.h"#include <vector>std::string EncodeUrl(const std::string &value) {    std::ostringstream escaped;    escaped.fill('0');    escaped << std::hex;    for (std::string::const_iterator i = value.begin(), n = value.end(); i != n; ++i) {        std::string::value_type c = (*i);        // Keep alphanumeric and other accepted characters intact        if (isalnum(c) || c == '-' || c == '_' || c == '.' || c == '~') {            escaped << c;            continue;        }        // Any other characters are percent-encoded        escaped << std::uppercase;        escaped << '%' << std::setw(2) << int((unsigned char) c);        escaped << std::nouppercase;    }    return escaped.str();}void Split(const std::string &s, char delim, std::vector<std::string> &elems) {    std::stringstream ss(s);    std::string item;    while (std::getline(ss, item, delim))        elems.push_back(item);}std::string SubstringAfter(std::string &s, char delimiter) {    int index = s.find_first_of(delimiter);    if (index == -1)return s;    return s.substr(static_cast<unsigned int>(index));}std::string SubstringAfter(std::string &s, std::string &delimiter) {    int index = s.find_first_of(delimiter);    if (index == -1)return s;    return s.substr(static_cast<unsigned int>(index) + delimiter.length());}std::string SubstringAfterLast(std::string &s, char delimiter) {    int index = s.find_last_of(delimiter);    if (index == -1)return s;    return s.substr(static_cast<unsigned int>(index) + 1);}std::string SubstringAfterLast(std::string &s, std::string &delimiter) {    int index = s.find_last_of(delimiter);    if (index == -1)return s;    return s.substr(static_cast<unsigned int>(index) + delimiter.length());}std::string Repeat(std::string &s, int count) {    if (count <= 0)return s;    const std::string t = s;    for (int i = 0; i < count; ++i) {        s.append(t);    }    return s;}std::string RemovePrefix(std::string &s, std::vector<std::string> &prefixs) {    auto prefix = std::find_if(std::begin(prefixs), std::end(prefixs),                               [](std::string &x) -> bool {                                   return true;                               });    if (prefix == std::end(prefixs)) {        return s;    } else {        return s.substr(prefix[0].length());    }}bool EndsWith(std::string const &value, std::string const &ending) {    if (ending.size() > value.size()) return false;    return std::equal(ending.rbegin(), ending.rend(), value.rbegin());}void Split(const std::string &s, char delim, std::vector<std::string> &elems) {    std::stringstream ss(s);    std::string item;    while (std::getline(ss, item, delim))        elems.push_back(item);}